#reader(lib"read.ss""wxme")WXME0108 ## 
#|
   This file uses the GRacket editor format.
   Open this file in DrRacket version 7.3 or later to read it.

   Most likely, it was created by saving a program in DrRacket,
   and it probably contains a program with non-text elements
   (such as images or comment boxes).

            http://racket-lang.org/
|#
 33 7 #"wxtext\0"
3 1 6 #"wxtab\0"
1 1 8 #"wximage\0"
2 0 8 #"wxmedia\0"
4 1 34 #"(lib \"syntax-browser.ss\" \"mrlib\")\0"
1 0 36 #"(lib \"cache-image-snip.ss\" \"mrlib\")\0"
1 0 68
(
 #"((lib \"image-core.ss\" \"mrlib\") (lib \"image-core-wxme.rkt\" \"mr"
 #"lib\"))\0"
) 1 0 16 #"drscheme:number\0"
3 0 44 #"(lib \"number-snip.ss\" \"drscheme\" \"private\")\0"
1 0 36 #"(lib \"comment-snip.ss\" \"framework\")\0"
1 0 93
(
 #"((lib \"collapsed-snipclass.ss\" \"framework\") (lib \"collapsed-sni"
 #"pclass-wxme.ss\" \"framework\"))\0"
) 0 0 43 #"(lib \"collapsed-snipclass.ss\" \"framework\")\0"
0 0 19 #"drscheme:sexp-snip\0"
0 0 29 #"drscheme:bindings-snipclass%\0"
1 0 101
(
 #"((lib \"ellipsis-snip.rkt\" \"drracket\" \"private\") (lib \"ellipsi"
 #"s-snip-wxme.rkt\" \"drracket\" \"private\"))\0"
) 2 0 88
(
 #"((lib \"pict-snip.rkt\" \"drracket\" \"private\") (lib \"pict-snip.r"
 #"kt\" \"drracket\" \"private\"))\0"
) 0 0 55
#"((lib \"snip.rkt\" \"pict\") (lib \"snip-wxme.rkt\" \"pict\"))\0"
1 0 34 #"(lib \"bullet-snip.rkt\" \"browser\")\0"
0 0 25 #"(lib \"matrix.ss\" \"htdp\")\0"
1 0 22 #"drscheme:lambda-snip%\0"
1 0 29 #"drclickable-string-snipclass\0"
0 0 26 #"drracket:spacer-snipclass\0"
0 0 57
#"(lib \"hrule-snip.rkt\" \"macro-debugger\" \"syntax-browser\")\0"
1 0 26 #"drscheme:pict-value-snip%\0"
0 0 45 #"(lib \"image-snipr.ss\" \"slideshow\" \"private\")\0"
1 0 38 #"(lib \"pict-snipclass.ss\" \"slideshow\")\0"
2 0 55 #"(lib \"vertical-separator-snip.ss\" \"stepper\" \"private\")\0"
1 0 18 #"drscheme:xml-snip\0"
1 0 31 #"(lib \"xml-snipclass.ss\" \"xml\")\0"
1 0 21 #"drscheme:scheme-snip\0"
2 0 34 #"(lib \"scheme-snipclass.ss\" \"xml\")\0"
1 0 10 #"text-box%\0"
1 0 32 #"(lib \"text-snipclass.ss\" \"xml\")\0"
1 0 1 6 #"wxloc\0"
          0 0 68 0 1 #"\0"
0 75 1 #"\0"
0 10 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 0 9
#"Standard\0"
0 75 23 #"Lucida Sans Typewriter\0"
0 9 90 -1 90 -1 3 -1 0 1 0 1 0 0 0 0 0 0 0 0 0 0 0 255 255 255 1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1 1 1 1 1 1 0 0 0 0 0 0 -1 -1 2 24
#"framework:default-color\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 15
#"text:ports out\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 150 0 150 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 93 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 255 0 0 0 0 0 -1
-1 2 15 #"text:ports err\0"
0 -1 1 #"\0"
1 0 -1 -1 93 -1 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 17
#"text:ports value\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 175 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 27 #"Matching Parenthesis Style\0"
0 -1 1 #"\0"
1.0 0 92 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 34 139 34 0 0 0 -1
-1 2 1 #"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 102 102 255 0 0 0 -1 -1 2
37 #"framework:syntax-color:scheme:symbol\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 38
#"framework:syntax-color:scheme:keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 38 38 128 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 249 148 40 0 0 0 -1 -1 2
38 #"framework:syntax-color:scheme:comment\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 194 116 31 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 51 174 51 0 0 0 -1 -1 2 37
#"framework:syntax-color:scheme:string\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 35
#"framework:syntax-color:scheme:text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 60 194 57 0 0 0 -1 -1 2 39
#"framework:syntax-color:scheme:constant\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 41 128 38 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 151 69 43 0 0 0 -1 -1 2 49
#"framework:syntax-color:scheme:hash-colon-keyword\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 42
#"framework:syntax-color:scheme:parenthesis\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 132 60 36 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"framework:syntax-color:scheme:error\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 255 255 0 0 0 -1 -1 2
36 #"framework:syntax-color:scheme:other\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 16
#"Misspelled Text\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 163 255 0 0 0 -1 -1 2
38 #"drracket:check-syntax:lexically-bound\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 81 112 203 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 192 203 0 0 0 -1 -1 2
28 #"drracket:check-syntax:set!d\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 37
#"drracket:check-syntax:unused-require\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 36
#"drracket:check-syntax:free-variable\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 255 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 166 0 255 0 0 0 -1 -1 2 31
#"drracket:check-syntax:imported\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 68 0 203 0 0 0 -1 -1 2 47
#"drracket:check-syntax:my-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 178 34 34 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 50 205 50 0 0 0 -1 -1 2 50
#"drracket:check-syntax:their-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 116 0 0 0 0 -1 -1 2 48
#"drracket:check-syntax:unk-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 240 230 140 0 0 0 -1 -1 2
49 #"drracket:check-syntax:both-obligation-style-pref\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 139 142 28 0 0 0 -1 -1 2
26 #"plt:htdp:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 1
#"\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 205 92 92 0 0 0 -1 -1 2 27
#"plt:htdp:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 4 #"XML\0"
0 70 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 37 #"plt:module-language:test-coverage-on\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 0 0 0 0 1 1 1 0 0 0 0 0 0 -1 -1 2 38
#"plt:module-language:test-coverage-off\0"
0 -1 1 #"\0"
1 0 -1 -1 -1 93 -1 -1 0 1 0 0 0 1 0 0 0 0 0 0 255 165 0 0 0 0 -1 -1 4 1
#"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 0 255 0 0 0 -1
-1 4 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 71 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 0 0 0 0 0 1.0 1.0 1.0 0 100 0 0 0 0 -1
-1 17 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
25 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
45 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
15 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
14 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
22 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
47 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
4 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 0 0 0 0 1 0 0 0 0 0 0 0 0 0 0 255 255 255 -1 -1
2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 1.0 1.0 1.0 1.0 1.0 1.0 0 0 0 0 0 0
-1 -1 2 1 #"\0"
0 -1 1 #"\0"
1.0 0 -1 -1 -1 -1 -1 -1 1 0 0 0 0 0 0 0 0 1.0 1.0 1.0 65 105 225 0 0 0
-1 -1           0 1345 0 4 3 85
(
 #";; The first three lines of this file were inserted by DrRacket. The"
 #"y record metadata"
) 0 0 4 29 1 #"\n"
0 0 4 3 85
(
 #";; about the language level of this file in a form that our tools ca"
 #"n easily process."
) 0 0 4 29 1 #"\n"
0 0 4 3 203
(
 #"#reader(lib \"htdp-intermediate-lambda-reader.ss\" \"lang\")((modnam"
 #"e mnist-digit-classifier) (read-case-sensitive #t) (teachpacks ()) ("
 #"htdp-settings #(#t constructor repeating-decimal #f #t none #f () #f"
 #")))"
) 0 0 4 29 1 #"\n"
0 0 17 3 35 #";;;;;;MNIST NUMBER CLASSIFIER;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 11 #"2htdp/image"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 7 #"require"
0 0 25 3 1 #" "
0 0 14 3 14 #"2htdp/universe"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 28 #";;;;;;DATA DEFINITIONS;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";; A Feature is a Number in the range of [0-255]"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";; Represents a pixel with a greyscale color"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 44 #";; A Bitmap is a [List-of [List-of Feature]]"
0 0 25 29 1 #"\n"
0 0 17 3 56 #";; Represents a 2-dimensional representation of an image"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 37 #";; An Instance is a [List-of Feature]"
0 0 25 29 1 #"\n"
0 0 17 3 49 #";; Represents a single flattened vector of pixels"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 5 #"train"
0 0 25 3 2 #" ["
0 0 14 3 6 #"bitmap"
0 0 25 3 1 #" "
0 0 14 3 6 #"visual"
0 0 25 3 1 #" "
0 0 14 3 8 #"instance"
0 0 25 3 1 #" "
0 0 14 3 5 #"digit"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 17 3 57 #";; A Training is a (make-train Bitmap Image Instance Nat)"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; b represents the bitmap representation of an image"
0 0 25 29 1 #"\n"
0 0 17 3 55 #";; v represents the visual representation of the bitmap"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; i represents the flattened vector of all features in the image"
0 0 25 29 1 #"\n"
0 0 17 3 51 #";; d represents the digit the image corresponds to."
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 4 #"test"
0 0 25 3 2 #" ["
0 0 14 3 6 #"bitmap"
0 0 25 3 1 #" "
0 0 14 3 6 #"visual"
0 0 25 3 1 #" "
0 0 14 3 8 #"instance"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 17 3 51 #";; A Testing is a (make-test Bitmap Image Instance)"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; b represents the bitmap representation of an image"
0 0 25 29 1 #"\n"
0 0 17 3 55 #";; v represents the visual representation of the bitmap"
0 0 25 29 1 #"\n"
0 0 17 3 65
#";; i represents the flattened vector of all features in the image"
0 0 25 29 1 #"\n"
0 0 17 3 77
(
 #";; the difference from a Training is that in a Testing, the digit is"
 #" unknown."
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 13 #"define-struct"
0 0 25 3 1 #" "
0 0 14 3 8 #"neighbor"
0 0 25 3 2 #" ["
0 0 14 3 5 #"train"
0 0 25 3 1 #" "
0 0 14 3 4 #"dist"
0 0 25 3 2 #"])"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; A Neighbor is a (make-neighbor Training NonNegNum)"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; t represents the Training image"
0 0 25 29 1 #"\n"
0 0 17 3 71
(
 #";; d represents the distance of the training image from a testing im"
 #"age"
) 0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";;;;;;EXAMPLES;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 20 #";; Feature Examples:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"FEAT0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 6 #"FEAT57"
0 0 25 3 1 #" "
0 0 22 3 2 #"57"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"FEAT100"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"FEAT233"
0 0 25 3 1 #" "
0 0 22 3 3 #"233"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 7 #"FEAT255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 19 #";; Bitmap Examples:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"BITM0"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"BITM1"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"BITM2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 17 #"                ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";; Instance Examples:"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST0"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 3 #"())"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST1"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST2"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST3"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST4"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST5"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST6"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST7"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";;;;;;TEMPLATES;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 32 #";; feature-temp : Feature -> ???"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"feature-temp"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 3 #"..."
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 3 #"..."
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 30 #";; bitmap-temp : Bitmap -> ???"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 11 #"bitmap-temp"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 5 #"cons?"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 9 #"list-temp"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 11 #"bitmap-temp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; instance-temp : Instance -> ???"
0 0 25 29 1 #"\n"
0 0 17 3 2 #"#;"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"instance-temp"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 15 3 4 #"cond"
0 0 25 3 3 #" [("
0 0 14 3 6 #"empty?"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 1 #"]"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"          [("
0 0 14 3 5 #"cons?"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 2 #") "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 12 #"feature-temp"
0 0 25 3 2 #" ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 21 #"                     "
0 0 14 3 3 #"..."
0 0 25 3 2 #" ("
0 0 14 3 13 #"instance-temp"
0 0 25 3 2 #" ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #")) "
0 0 14 3 3 #"..."
0 0 25 3 3 #"]))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 21 #";;;;;;FUNCTIONS;;;;;;"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 33 #";; return-former : (X Y) X Y -> X"
0 0 25 29 1 #"\n"
0 0 17 3 50 #";; always returns the value of the first argument."
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"return-former"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 1 #"y"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 2 #"  "
0 0 14 3 1 #"x"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"return-former"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";; next-index : (X) [List-of X] Nat -> Nat"
0 0 25 29 1 #"\n"
0 0 17 3 90
(
 #";; gets the next valid index in the list, 0 if the supplied index is"
 #" the last in the list."
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"next-index"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 2 #" ("
0 0 14 3 4 #"sub1"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 4 #"))) "
0 0 22 3 1 #"0"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"next-index"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"next-index"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST1"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 42 #";; prev-index : (X) [List-of X] Nat -> Nat"
0 0 25 29 1 #"\n"
0 0 17 3 92
(
 #";; gets the previous valid index in the list, highest valid index if"
 #" the supplied index is 0"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 10 #"prev-index"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 2 #"if"
0 0 25 3 2 #" ("
0 0 14 3 1 #"="
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #") ("
0 0 14 3 4 #"sub1"
0 0 25 3 2 #" ("
0 0 14 3 6 #"length"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 4 #")) ("
0 0 14 3 4 #"sub1"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"prev-index"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 2 #") "
0 0 22 3 1 #"1"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 10 #"prev-index"
0 0 25 3 1 #" "
0 0 14 3 5 #"INST1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 53 #";; flatten : (X) [List-of [List-of X]] -> [List-of X]"
0 0 25 29 1 #"\n"
0 0 17 3 46 #";; converts a list of lists into a single list"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 25 3 1 #" "
0 0 14 3 5 #"lolox"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"foldr"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 3 #"lox"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 12 #"           ("
0 0 14 3 6 #"append"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 9 #"         "
0 0 22 3 1 #"'"
0 0 25 3 3 #"() "
0 0 14 3 5 #"lolox"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"flatten"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 2 #"(("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 26 #"                         ("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 14 #"              "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 48 #";; training-fnames : Natural -> [List-of String]"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; produces a list of n training file names given a number n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"training-fnames"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 7 #"flatten"
0 0 25 3 2 #" ("
0 0 14 3 10 #"build-list"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 29 1 #"\n"
0 0 25 3 24 #"                       ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"i"
0 0 25 3 3 #") ("
0 0 14 3 10 #"build-list"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 29 1 #"\n"
0 0 25 3 43 #"                                          ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"n"
0 0 25 3 3 #") ("
0 0 14 3 13 #"string-append"
0 0 25 3 1 #" "
0 0 19 3 10 #"\"train/d_\""
0 0 25 29 1 #"\n"
0 0 25 3 65
#"                                                                ("
0 0 14 3 14 #"number->string"
0 0 25 3 2 #" ("
0 0 14 3 4 #"add1"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 64
#"                                                                "
0 0 19 3 3 #"\"_\""
0 0 25 29 1 #"\n"
0 0 25 3 65
#"                                                                ("
0 0 14 3 14 #"number->string"
0 0 25 3 1 #" "
0 0 14 3 1 #"i"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 64
#"                                                                "
0 0 19 3 6 #"\".txt\""
0 0 25 3 7 #")))))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"training-fnames"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_1_0.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_0.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_0.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_1.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_1.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_1.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_2.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_2.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_2.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_3.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_3.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_3.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_4.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_4.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_4.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_5.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_5.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_5.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_6.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_6.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_6.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_7.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_7.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_7.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_8.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_8.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_8.txt\""
0 0 25 29 1 #"\n"
0 0 25 3 20 #"                    "
0 0 19 3 17 #"\"train/d_1_9.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_2_9.txt\""
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_9.txt\""
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 35 #";; fname->label : String -> Integer"
0 0 25 29 1 #"\n"
0 0 17 3 40 #";; extracts the label from the file name"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 12 #"fname->label"
0 0 25 3 1 #" "
0 0 14 3 5 #"fname"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 3 3 #" [("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 17 #"number-list-fname"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 1 #" "
0 0 14 3 15 #"string-numeric?"
0 0 25 3 2 #" ("
0 0 14 3 7 #"explode"
0 0 25 3 1 #" "
0 0 14 3 5 #"fname"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 14 #"string->number"
0 0 25 3 2 #" ("
0 0 14 3 8 #"list-ref"
0 0 25 3 1 #" "
0 0 14 3 17 #"number-list-fname"
0 0 25 3 2 #" ("
0 0 14 3 10 #"prev-index"
0 0 25 3 1 #" "
0 0 14 3 17 #"number-list-fname"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"fname->label"
0 0 25 3 1 #" "
0 0 19 3 12 #"\"hello2.jpg\""
0 0 25 3 2 #") "
0 0 22 3 1 #"2"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 12 #"fname->label"
0 0 25 3 1 #" "
0 0 19 3 17 #"\"train/d_3_7.txt\""
0 0 25 3 2 #") "
0 0 22 3 1 #"7"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; map-lol : (X Y) [X -> Y] [List-of [List-of X]] -> [List-of [List-"
 #"of Y]]"
) 0 0 25 29 1 #"\n"
0 0 17 3 100
(
 #";; transforms a list of lists of one type to a list of lists of anot"
 #"her type according to a function"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 7 #"map-lol"
0 0 25 3 1 #" "
0 0 14 3 4 #"func"
0 0 25 3 1 #" "
0 0 14 3 5 #"lolox"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 3 #"lox"
0 0 25 3 3 #") ("
0 0 14 3 3 #"map"
0 0 25 3 1 #" "
0 0 14 3 4 #"func"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 3 #")) "
0 0 14 3 5 #"lolox"
0 0 25 3 2 #"))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 7 #"map-lol"
0 0 25 3 1 #" "
0 0 14 3 14 #"string->number"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"0\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 40 #"                                       ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 19 3 3 #"\"3\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"2\""
0 0 25 3 1 #" "
0 0 19 3 3 #"\"1\""
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 16 #"               ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 54 #";; f-left-to-right : (X) [X X -> X] [NEList-of X] -> X"
0 0 25 29 1 #"\n"
0 0 17 3 58
#";; calls a function on a non-empty list from left to right"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 15 #"f-left-to-right"
0 0 25 3 1 #" "
0 0 14 3 4 #"func"
0 0 25 3 1 #" "
0 0 14 3 3 #"nel"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"foldl"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 3 #") ("
0 0 14 3 4 #"func"
0 0 25 3 1 #" "
0 0 14 3 5 #"accum"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 4 #")) ("
0 0 14 3 5 #"first"
0 0 25 3 1 #" "
0 0 14 3 3 #"nel"
0 0 25 3 3 #") ("
0 0 14 3 4 #"rest"
0 0 25 3 1 #" "
0 0 14 3 3 #"nel"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 15 #"f-left-to-right"
0 0 25 3 1 #" "
0 0 14 3 1 #"-"
0 0 25 3 1 #" "
0 0 22 3 1 #"'"
0 0 25 3 1 #"("
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 3 #")) "
0 0 22 3 2 #"-4"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 1 #" "
0 0 14 3 9 #"CELL-SIZE"
0 0 25 3 1 #" "
0 0 22 3 2 #"10"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 17 3 34 #";; bitmap->image : Bitmap -> Image"
0 0 25 29 1 #"\n"
0 0 17 3 39 #";; produces a visualization of a bitmap"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 13 #"bitmap->image"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 15 3 5 #"local"
0 0 25 3 2 #" ["
0 0 17 3 25 #";; cell : Number -> Image"
0 0 25 29 1 #"\n"
0 0 25 3 10 #"          "
0 0 17 3 78
(
 #";; draws a square of size 10 and greyscale color according to the gi"
 #"ven Number"
) 0 0 25 29 1 #"\n"
0 0 25 3 11 #"          ("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 4 #"cell"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 13 #"            ("
0 0 14 3 6 #"square"
0 0 25 3 1 #" "
0 0 14 3 9 #"CELL-SIZE"
0 0 25 3 1 #" "
0 0 19 3 7 #"\"solid\""
0 0 25 3 2 #" ("
0 0 14 3 10 #"make-color"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #" "
0 0 14 3 1 #"n"
0 0 25 3 4 #")))]"
0 0 25 29 1 #"\n"
0 0 25 3 5 #"    ("
0 0 14 3 15 #"f-left-to-right"
0 0 25 3 1 #" "
0 0 14 3 5 #"above"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 4 #"inst"
0 0 25 3 3 #") ("
0 0 14 3 15 #"f-left-to-right"
0 0 25 3 1 #" "
0 0 14 3 6 #"beside"
0 0 25 3 1 #" "
0 0 14 3 4 #"inst"
0 0 25 3 4 #")) ("
0 0 14 3 7 #"map-lol"
0 0 25 3 1 #" "
0 0 14 3 4 #"cell"
0 0 25 3 1 #" "
0 0 14 3 1 #"b"
0 0 25 3 5 #")))))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"bitmap->image"
0 0 25 3 1 #" "
0 0 14 3 5 #"BITM1"
0 0 25 3 2 #") "
0 6           4 22 4226
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-po"
 #"int 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:transla"
 #"te 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-"
 #"point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(stru"
 #"ct:color 0 0 0 255)))))) #(struct:translate 20 0 #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(stru"
 #"ct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))) #("
 #"struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point"
 #" 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate "
 #"10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:"
 #"color 0 0 0 0)))))) #(struct:translate 20 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 0)))))))) #(struc"
 #"t:translate 0 20 #(struct:overlay #(struct:translate 0 0 #(struct:ov"
 #"erlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon"
 #" (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 "
 #"0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 "
 #"0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate 10 0 "
 #"#(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0"
 #" 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 "
 #"0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color"
 #" 0 0 0 255)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(st"
 #"ruct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulle"
 #"d-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))))) #(struct"
 #":translate 0 30 #(struct:overlay #(struct:translate 0 0 #(struct:ove"
 #"rlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon "
 #"(#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0"
 #" 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0"
 #" 10 0 0)) 255 #(struct:color 0 0 0 0)))) #(struct:translate 10 0 #(s"
 #"truct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 "
 #"0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 1"
 #"0 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 "
 #"0 0 0)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(struct:"
 #"polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 "
 #"0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-poi"
 #"nt 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))))) #(struct:tran"
 #"slate 0 40 #(struct:overlay #(struct:translate 0 0 #(struct:overlay "
 #"#(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(st"
 #"ruct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #"
 #"(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0"
 #" 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate 10 0 #(stru"
 #"ct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0"
 #") #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 1"
 #"0 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0"
 #" 255)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(struct:p"
 #"olygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0"
 #" 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-poin"
 #"t 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255))))))) #(struct:bb 30 "
 #"50 50) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"bitmap->image"
0 0 25 3 1 #" "
0 0 14 3 5 #"BITM2"
0 0 25 3 2 #") "
0 6           4 22 4230
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:overlay #(struct:translate 0 0 #(s"
 #"truct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-po"
 #"int 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:transla"
 #"te 10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-poi"
 #"nt 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-"
 #"point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(stru"
 #"ct:color 0 0 0 255)))))) #(struct:translate 20 0 #(struct:translate "
 #"0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pu"
 #"lled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(stru"
 #"ct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))) #("
 #"struct:translate 0 10 #(struct:overlay #(struct:translate 0 0 #(stru"
 #"ct:overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:po"
 #"lygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 "
 #"10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point"
 #" 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate "
 #"10 0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point "
 #"0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-poi"
 #"nt 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:"
 #"color 0 0 0 0)))))) #(struct:translate 20 0 #(struct:translate 0 0 #"
 #"(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-"
 #"point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pu"
 #"lled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))))) #(str"
 #"uct:translate 0 20 #(struct:overlay #(struct:translate 0 0 #(struct:"
 #"overlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 "
 #"0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate 10 "
 #"0 #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0"
 #" 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point "
 #"0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:col"
 #"or 0 0 0 255)))))) #(struct:translate 20 0 #(struct:translate 0 0 #("
 #"struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-p"
 #"oint 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pul"
 #"led-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))))) #(stru"
 #"ct:translate 0 30 #(struct:overlay #(struct:translate 0 0 #(struct:o"
 #"verlay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygo"
 #"n (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0"
 #" 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0"
 #" 0 10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate 10 0"
 #" #(struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 "
 #"0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0"
 #" 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:colo"
 #"r 0 0 0 0)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(str"
 #"uct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-poin"
 #"t 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled"
 #"-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255)))))))) #(struct:"
 #"translate 0 40 #(struct:overlay #(struct:translate 0 0 #(struct:over"
 #"lay #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon ("
 #"#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 "
 #"0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 "
 #"10 0 0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate 10 0 #("
 #"struct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0"
 #" 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 "
 #"10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0"
 #" 0 0 255)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(stru"
 #"ct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point"
 #" 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-"
 #"point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255))))))) #(struct:bb"
 #" 30 50 50) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 13 #"bitmap->image"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"200"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"205"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 3 #"   "
0 0 22 3 3 #"213"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 31 #"                              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"252"
0 0 25 3 1 #" "
0 0 22 3 3 #"255"
0 0 25 3 1 #" "
0 0 22 3 3 #"105"
0 0 25 3 4 #"))) "
0 6           4 22 2522
(
 #"(#(struct:overlay #(struct:translate 0 0 #(struct:overlay #(struct:t"
 #"ranslate 0 0 #(struct:overlay #(struct:translate 0 0 #(struct:overla"
 #"y #(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#("
 #"struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0)"
 #" #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10"
 #" 0 0)) 255 #(struct:color 0 0 0 200)))) #(struct:translate 10 0 #(st"
 #"ruct:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0"
 #" 0) #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10"
 #" 10 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0"
 #" 0 255)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(struct"
 #":polygon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0"
 #" 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-po"
 #"int 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 205)))))) #(struct:trans"
 #"late 0 10 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #"
 #"(struct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(str"
 #"uct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #("
 #"struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 "
 #"0)) 255 #(struct:color 0 0 0 255)))) #(struct:translate 10 0 #(struc"
 #"t:translate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0)"
 #" #(struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10"
 #" 0 0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 "
 #"0)))))) #(struct:translate 20 0 #(struct:translate 0 0 #(struct:poly"
 #"gon (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10"
 #" 0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0"
 #" 0 0 10 0 0)) 255 #(struct:color 0 0 0 213)))))))) #(struct:translat"
 #"e 0 20 #(struct:overlay #(struct:translate 0 0 #(struct:overlay #(st"
 #"ruct:translate 0 0 #(struct:translate 0 0 #(struct:polygon (#(struct"
 #":pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 0 0 0) #(str"
 #"uct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 0 0 10 0 0))"
 #" 255 #(struct:color 0 0 0 252)))) #(struct:translate 10 0 #(struct:t"
 #"ranslate 0 0 #(struct:polygon (#(struct:pulled-point 0 0 0 0 0 0) #("
 #"struct:pulled-point 0 0 10 0 0 0) #(struct:pulled-point 0 0 10 10 0 "
 #"0) #(struct:pulled-point 0 0 0 10 0 0)) 255 #(struct:color 0 0 0 255"
 #")))))) #(struct:translate 20 0 #(struct:translate 0 0 #(struct:polyg"
 #"on (#(struct:pulled-point 0 0 0 0 0 0) #(struct:pulled-point 0 0 10 "
 #"0 0 0) #(struct:pulled-point 0 0 10 10 0 0) #(struct:pulled-point 0 "
 #"0 0 10 0 0)) 255 #(struct:color 0 0 0 105))))))) #(struct:bb 30 30 3"
 #"0) #f)"
) 0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 29 1 #"\n"
0 0 17 3 60
#";; smallest-of-list-by-f : (X Y) [X -> Y] [NEList-of X] -> X"
0 0 25 29 1 #"\n"
0 0 17 3 74
(
 #";; finds the first element in the non empty list that minimizes a fu"
 #"nction"
) 0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 15 3 6 #"define"
0 0 25 3 2 #" ("
0 0 14 3 21 #"smallest-of-list-by-f"
0 0 25 3 1 #" "
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 3 #"lox"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 3 #"  ("
0 0 14 3 5 #"first"
0 0 25 3 2 #" ("
0 0 14 3 6 #"filter"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 6 #"equal?"
0 0 25 3 2 #" ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 5 #"apply"
0 0 25 3 1 #" "
0 0 14 3 3 #"min"
0 0 25 3 2 #" ("
0 0 14 3 3 #"map"
0 0 25 3 2 #" ("
0 0 15 3 2 #"\316\273"
0 0 25 3 2 #" ("
0 0 14 3 1 #"x"
0 0 25 3 3 #") ("
0 0 14 3 1 #"f"
0 0 25 3 1 #" "
0 0 14 3 1 #"x"
0 0 25 3 3 #")) "
0 0 14 3 3 #"lox"
0 0 25 3 5 #")))) "
0 0 14 3 3 #"lox"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 1 #"("
0 0 14 3 12 #"check-expect"
0 0 25 3 2 #" ("
0 0 14 3 21 #"smallest-of-list-by-f"
0 0 25 3 1 #" "
0 0 14 3 6 #"length"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 2 #" ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"1"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 1 #" "
0 0 22 3 1 #"3"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 5 #"-1000"
0 0 25 3 1 #" "
0 0 22 3 3 #"-99"
0 0 25 3 1 #" "
0 0 22 3 2 #"-1"
0 0 25 3 1 #" "
0 0 22 3 1 #"0"
0 0 25 3 1 #")"
0 0 25 29 1 #"\n"
0 0 25 3 51 #"                                                  ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 1 #"2"
0 0 25 3 3 #")))"
0 0 25 29 1 #"\n"
0 0 25 3 15 #"              ("
0 0 14 3 4 #"list"
0 0 25 3 1 #" "
0 0 22 3 3 #"100"
0 0 25 3 2 #"))"
0           0
